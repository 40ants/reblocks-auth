(uiop:define-package #:reblocks-auth/providers/email/processing
  (:use #:cl)
  (:import-from #:reblocks-auth/providers/email/models
                #:registration-email
                #:check-registration-code)
  (:import-from #:reblocks/html
                #:with-html)
  (:import-from #:reblocks/widget
                #:defwidget)
  (:import-from #:reblocks-auth/button)
  (:import-from #:reblocks-ui/form
                #:with-html-form
                #:render-form-and-button)
  (:import-from #:reblocks-ui/popup
                #:hide-popup
                #:show-popup)
  (:import-from #:reblocks-lass)
  (:import-from #:reblocks/dependencies)
  (:export #:*recaptcha-site-key*
           #:*recaptcha-secret-key*))
(in-package #:reblocks-auth/providers/email/processing)


(defvar *recaptcha-site-key* nil
  "Set this variable to a site key, generated by Google reCaptcha.")

(defvar *recaptcha-secret-key* nil
  "Set this variable to a secret key, generated by Google reCaptcha.")


(defwidget email-query-widget (reblocks-ui/popup:popup-widget)
  ((retpath :initarg :retpath
            :reader retpath)
   (sent :initform nil
         :accessor sent)))


(defun verify-recaptcha (token)
  "More about token verification:

   https://developers.google.com/recaptcha/docs/verify
"
  (log:debug "Verifying recaptcha token")
  
  (unless *recaptcha-secret-key*
    (error "To verify recaptcha requests you need to set reblocks-auth/providers/email/processing::*recaptcha-secret-key*"))
  
  (let ((payload (list
                  (cons "secret" *recaptcha-secret-key*)
                  (cons "response" token)))
        (ip (reblocks/request:get-remote-ip)))
    (when ip
      (push (cons "remoteip" ip)
            payload))
    (let* ((response
             (dex:post "https://www.google.com/recaptcha/api/siteverify"
                       :content payload
                       :connect-timeout 3
                       :read-timeout 3))
           (parsed (yason:parse response))
           (success (gethash "success" parsed)))
      (if success
          ;; Here is an example of successful response:
          ;; {
          ;;   "success": true,
          ;;   "challenge_ts": "2023-10-21T21:39:04Z",
          ;;   "hostname": "localhost",
          ;;   "score": 0.9,
          ;;   "action": "submit"
          ;; }
          (log:debug "Received recaptcha response" response)
          (log:error "Received recaptcha response" response))
      (values success))))


(defmethod reblocks-ui/popup:render-popup-content ((widget email-query-widget))
  (flet ((send-code (&key email recaptcha-token &allow-other-keys)
           (cond
             ((string= email "")

              (reblocks-ui/form:field-error "email"
                                            "Please, give a correct email address."))
             ((and *recaptcha-secret-key*
                   (not (verify-recaptcha recaptcha-token)))
              (reblocks-ui/form:form-error "Seems you are a robot. Please, contact the site's owner."))
             (t
              (setf (sent widget)
                    t)
              (reblocks-auth/providers/email/models::send-code email :retpath (retpath widget))
              (reblocks/widget:update widget))))
         (close-popup (&rest rest)
           (declare (ignore rest))
           (setf (sent widget)
                 nil)
           (hide-popup widget)))
    (cond
      ((sent widget)
       (with-html
         (:p "A login link was sent to your email."))
       (render-form-and-button :close #'close-popup))
      (t
       (with-html-form (:post #'send-code
                        :submit-fn (if *recaptcha-site-key*
                                       "submitFormWithRecaptcha(\"~A\", $(this), \"~A\")"
                                       "initiateFormAction(\"~A\", $(this), \"~A\")"))
         (when *recaptcha-site-key*
           (:script :src (format nil "https://www.google.com/recaptcha/api.js?render=~A"
                                 *recaptcha-site-key*))

           (:script
            (:raw (format nil "
      function submitFormWithRecaptcha(actionCode, form, session_arg) {
        grecaptcha.ready(function() {
          grecaptcha.execute('~A', {action: 'submit'}).then(function(token) {
              var options = {'args': {'recaptcha-token': token}};
              initiateFormAction(actionCode, form, options);
          });
        });
      }
"
                          *recaptcha-site-key*))))
         
         (:input :name "email"
                 :type "email"
                 :placeholder "Email")
         (reblocks-ui/form:error-placeholder "email")
         (:input :type "submit"
                 :class "button small"
                 :value "Send Code"))))))


(defmethod reblocks-auth/button:render ((service (eql :email))
                                        &key retpath)
  (let ((popup (make-instance 'email-query-widget
                              :retpath retpath)))
    (with-html
      (reblocks/widget:render popup)

      (render-form-and-button
       :email (lambda (&rest args)
                (declare (ignore args))
                (show-popup popup))
       :button-class "button small"))))



(defmethod reblocks-auth/auth:authenticate ((service (eql :email)) &rest params &key code)
  (declare (ignorable params))
  
  (unless code
    (error "Unable to authenticate user without the code."))
  
  (let* ((registration-code (check-registration-code code)))
    (let* ((email (registration-email registration-code))
           (user (reblocks-auth/models:find-social-user :email email)))
      
      (cond
        (user (values user
                      nil))
        (t (values (reblocks-auth/models:create-social-user :email
                                                            email
                                                            :email email)
                   t))))))


(defmethod reblocks/dependencies:get-dependencies ((widget email-query-widget))
  (list*
   (reblocks-lass:make-dependency
     '(.email-query-widget
       (.popup-content
        :color black)))
   (call-next-method)))
